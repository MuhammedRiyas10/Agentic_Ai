# -*- coding: utf-8 -*-
"""DAY4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E167i2tzTxy0WigFeGbA_9TvniVS7ipC
"""

import os
import json
import requests
import google.generativeai as genai
from dotenv import load_dotenv

class ReActAgent:
    def __init__(self, topic):
        """Initialize the ReAct Agent with a topic."""
        if not topic or not isinstance(topic, str):
            raise ValueError("Topic must be a non-empty string.")
        self.topic = topic
        self.questions = []
        self.search_results = {}

        # Load environment variables
        load_dotenv()

        # Initialize Gemini client for LLM
        gemini_api_key = "AIzaSyBMeZz1rVfBNO7b0O0I4kcV07obEED4vFk"
        if not gemini_api_key:
            raise ValueError("GEMINI_API_KEY not found in .env file.")
        genai.configure(api_key=gemini_api_key)
        self.llm_client = genai.GenerativeModel("gemini-2.0-flash")

        # Get SerpAPI key
        self.serp_api_key = "a85af8a253a0475b06c3ae984bc14804cfe065dc994bce26581dfd7b60e0cace"
        if not self.serp_api_key:
            raise ValueError("SERP_API_KEY not found in .env file.")

    def generate_research_questions(self):
        """Use Gemini 2.0 Flash to generate 5-6 research questions for the topic."""
        prompt = (
            f"You are a research assistant. Given the topic '{self.topic}', "
            "generate a list of 5-6 well-structured research questions "
            "that cover different aspects of the topic. Ensure the questions are diverse, "
            "relevant, and clear. Return the questions as a JSON array of strings, "
            "e.g., [\"question1\", \"question2\", ...]."
        )

        try:
            response = self.llm_client.generate_content(
                prompt,
                generation_config={
                    "response_mime_type": "application/json"
                }
            )
            # Gemini returns response as text; parse it as JSON
            questions = json.loads(response.text)
            if not isinstance(questions, list) or not all(isinstance(q, str) for q in questions):
                raise ValueError("LLM returned invalid questions format.")
            self.questions = questions[:6]  # Limit to 6 questions
            return self.questions
        except Exception as e:
            print(f"Error generating questions: {e}")
            return []

    def search_web(self):
        """Search the web for answers to research questions using SerpAPI."""
        for question in self.questions:
            try:
                # SerpAPI parameters
                params = {
                    "q": question,
                    "api_key": self.serp_api_key,
                    "num": 5  # Limit to 5 results
                }
                response = requests.get("https://serpapi.com/search", params=params)
                response.raise_for_status()
                data = response.json()

                # Extract title and snippet from organic results
                results = [
                    {
                        "title": result.get("title", "No title"),
                        "content": result.get("snippet", "No content")
                    }
                    for result in data.get("organic_results", [])[:5]
                ]
                self.search_results[question] = results
            except Exception as e:
                print(f"Error searching for question '{question}': {e}")
                self.search_results[question] = []
        return self.search_results

    def generate_report(self):
        """Generate a structured Markdown report based on search results."""
        report = f"# Research Report: {self.topic.capitalize()}\n\n"

        # Introduction
        report += "## Introduction\n"
        report += (
            f"This report is generated by the ReAct Agent to provide insights into {self.topic}. "
            "The agent has used a series of research questions generated by the Gemini 2.0 Flash model "
            "to guide the research process, followed by relevant information gathered from web searches via SerpAPI. "
            "The following sections address each research question with key findings.\n\n"
        )

        # Sections for each question
        for question in self.questions:
            report += f"## Question: {question}\n"
            results = self.search_results.get(question, [])
            if not results:
                report += "No results found for this question.\n\n"
            else:
                report += "Key findings:\n"
                for idx, result in enumerate(results, 1):
                    report += (
                        f"{idx}. **{result['title']}**: "
                        f"{result['content'][:300]}... (Source truncated for brevity)\n"
                    )
                report += "\n"

        # Conclusion
        report += "## Conclusion\n"
        report += (
            f"This report has provided a comprehensive overview of {self.topic}. "
            "The findings highlight key aspects through targeted questions, "
            "drawing from recent web sources. Further research could explore "
            "additional dimensions or verify source credibility for deeper insights."
        )

        return report

def main():
    """Main function to test the ReAct agent."""
    try:
        # Sample topic
        topic = "Climate Change"
        agent = ReActAgent(topic)

        # Step 1: Generate questions
        print("Generating research questions...\n")
        questions = agent.generate_research_questions()
        if not questions:
            print("Failed to generate questions. Exiting.")
            return
        print("Generated Questions:")
        for idx, q in enumerate(questions, 1):
            print(f"{idx}. {q}")
        print("\n")

        # Step 2: Search web
        print("Searching web for answers...\n")
        results = agent.search_web()
        if not results:
            print("Failed to retrieve search results. Exiting.")
            return

        # Step 3: Generate report
        print("Generating report...\n")
        report = agent.generate_report()
        print("Report Generated:\n")
        print(report)

        # Save report to file
        with open("research_report_gemini_serp.md", "w", encoding="utf-8") as f:
            f.write(report)
        print("\nReport saved as 'research_report_gemini_serp.md'")

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()

!pip install google-generativeai requests python-dotenv

import os
import json
import requests
import google.generativeai as genai
from dotenv import load_dotenv

class ReActAgent:
    def init(self, topic):
        """Initialize the ReAct Agent with a topic."""
        if not topic or not isinstance(topic, str):
            raise ValueError("Topic must be a non-empty string.")
        self.topic = topic
        self.questions = []
        self.search_results = {}

        # Load environment variables
        load_dotenv()

        # Initialize Gemini client for LLM
        gemini_api_key = "AIzaSyDOhSN9ts3-T3srdo645yKcxiPOHSGsJkQ"
        if not gemini_api_key:
            raise ValueError("GEMINI_API_KEY not found in .env file.")
        genai.configure(api_key=gemini_api_key)
        self.llm_client = genai.GenerativeModel("gemini-2.0-flash")

        # Get SerpAPI key
        self.serp_api_key ="a85af8a253a0475b06c3ae984bc14804cfe065dc994bce26581dfd7b60e0cace"
        if not self.serp_api_key:
            raise ValueError("SERP_API_KEY not found in .env file.")

    def generate_research_questions(self):
        """Use Gemini 2.0 Flash to generate 5-6 research questions for the topic."""
        prompt = (
            f"You are a research assistant. Given the topic '{self.topic}', "
            "generate a list of 5-6 well-structured research questions "
            "that cover different aspects of the topic. Ensure the questions are diverse, "
            "relevant, and clear. Return the questions as a JSON array of strings, "
            "e.g., [\"question1\", \"question2\", ...]."
        )

        try:
            response = self.llm_client.generate_content(
                prompt,
                generation_config={
                    "response_mime_type": "application/json"
                }
            )
            # Gemini returns response as text; parse it as JSON
            questions = json.loads(response.text)
            if not isinstance(questions, list) or not all(isinstance(q, str) for q in questions):
                raise ValueError("LLM returned invalid questions format.")
            self.questions = questions[:6]  # Limit to 6 questions
            return self.questions
        except Exception as e:
            print(f"Error generating questions: {e}")
            return []

    def search_web(self):
        """Search the web for answers to research questions using SerpAPI."""
        for question in self.questions:
            try:
                # SerpAPI parameters
                params = {
                    "q": question,
                    "api_key": self.serp_api_key,
                    "num": 5  # Limit to 5 results
                }
                response = requests.get("https://serpapi.com/search", params=params)
                response.raise_for_status()
                data = response.json()

                # Extract title and snippet from organic results
                results = [
                    {
                        "title": result.get("title", "No title"),
                        "content": result.get("snippet", "No content")
                    }
                    for result in data.get("organic_results", [])[:5]
                ]
                self.search_results[question] = results
            except Exception as e:
                print(f"Error searching for question '{question}': {e}")
                self.search_results[question] = []
        return self.search_results

    def generate_report(self):
        """Generate a structured Markdown report based on search results."""
        report = f"# Research Report: {self.topic.capitalize()}\n\n"

        # Introduction
        report += "## Introduction\n"
        report += (
            f"This report is generated by the ReAct Agent to provide insights into {self.topic}. "
            "The agent has used a series of research questions generated by the Gemini 2.0 Flash model "
            "to guide the research process, followed by relevant information gathered from web searches via SerpAPI. "
            "The following sections address each research question with key findings.\n\n"
        )

        # Sections for each question
        for question in self.questions:
            report += f"## Question: {question}\n"
            results = self.search_results.get(question, [])
            if not results:
                report += "No results found for this question.\n\n"
            else:
                report += "Key findings:\n"
                for idx, result in enumerate(results, 1):
                    report += (
                        f"{idx}. {result['title']}: "
                        f"{result['content'][:300]}... (Source truncated for brevity)\n"
                    )
                report += "\n"

        # Conclusion
        report += "## Conclusion\n"
        report += (
            f"This report has provided a comprehensive overview of {self.topic}. "
            "The findings highlight key aspects through targeted questions, "
            "drawing from recent web sources. Further research could explore "
            "additional dimensions or verify source credibility for deeper insights."
        )

        return report

def main():
    """Main function to test the ReAct agent."""
    try:
        # Sample topic
        topic = "Climate Change"
        agent = ReActAgent(topic)

        # Step 1: Generate questions
        print("Generating research questions...\n")
        questions = agent.generate_research_questions()
        if not questions:
            print("Failed to generate questions. Exiting.")
            return
        print("Generated Questions:")
        for idx, q in enumerate(questions, 1):
            print(f"{idx}. {q}")
        print("\n")

        # Step 2: Search web
        print("Searching web for answers...\n")
        results = agent.search_web()
        if not results:
            print("Failed to retrieve search results. Exiting.")
            return

        # Step 3: Generate report
        print("Generating report...\n")
        report = agent.generate_report()
        print("Report Generated:\n")
        print(report)

        # Save report to file
        with open("research_report_gemini_serp.md", "w", encoding="utf-8") as f:
            f.write(report)
        print("\nReport saved as 'research_report_gemini_serp.md'")

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "main":
    main()